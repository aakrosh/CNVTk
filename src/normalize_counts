#!/usr/bin/env python

"""
    usage:
      normalize_counts [options] rawdata.txt > corrected_data.txt

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from math import ceil

import pandas as pd
import numpy as np
import statsmodels.api as sm

__author__ = "Aakrosh Ratan"
__email__  = "ratan@virginia.edu"

# do we want the debug information to be printed?
debug_flag = False

def main(filename):
    # read the details of GC content and Mapping quality
    df_adv = pd.read_table(filename, 
                           names = ["chrom","zstart","end","cov","uniq","gc"],
                           na_values = "NA",
                           dtype={'chrom':pd.np.str_},
                           sep = "\t")

    coverage = df_adv['cov']
    gccontent = df_adv['gc']

    smoothed = sm.nonparametric.lowess(coverage, gccontent)    
    meanofcoverages = np.median(coverage)

    meancov = {}
    for x,y in smoothed:
        meancov[x] = y

    # how many unique bases should I expect in a bin
    numuniq = ceil(np.mean(df_adv['uniq']))

    # now print out the updated values
    with open(filename, "r") as f:
        for line in f:
            chrom, start, end, cov, uniq, gc = line.strip().split()
            cov = int(cov)
            gc = int(gc)
            uniq = int(uniq)

            # Scale the coverage if for some reason (beacuse this is a section
            # at the edge of the chromosome), we do not have enough bases in
            # this window 
            if uniq != numuniq:
                cov = int(cov * numuniq / uniq)

            if gc not in meancov:
                offset1 = 0
                while (gc - offset1)  not in meancov:
                    offset1 += 1
                offset2 = 0
                while (gc + offset2)  not in meancov:
                    offset2 += 1
                if offset1 < offset2:
                    gc = gc - offset1
                else:
                    gc = gc + offset2
             
            newcov = cov * meanofcoverages / meancov[gc]
            # The newcov should never be negative
            if newcov < 0: newcov = 0
            print "%s\t%s\t%s\t%d\t%d\t%s" % (chrom, start, end, newcov, uniq, gc)

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hd",["help", "debug"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        else:
            assert False, "unhandled option"

    if len(args) != 1:
        print >> stderr, __doc__
        exit(3)

    main(args[0])
